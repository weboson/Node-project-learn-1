//КОД ИЗ УЧЕБНИКА: https://metanit.com/web/nodejs/ 

// const http = require("http");
// http.createServer(function(request,response){
//     // console.log(request); // показывает огромный объект
//     response.end("Hello NodeJS!");
     
// }).listen(3000, "127.0.0.1",function(){
//     console.log("Сервер начал прослушивание запросов на порту 3000");
// });
 
let os = require("os")
console.log(os.userInfo()); 
// покажет объект:
// {
    // uid: -1,
    // gid: -1,
    // username: 'Ришат',
    // homedir: 'C:\\Users\\Ришат',
    // shell: null
//  }

// метод console.log() хранится в глобальном объекте clobal: https://metanit.com/web/nodejs/2.3.php
global.console.log("Глобальный объект clobal"); // Глобальный объект clobal

// Передача параметров приложению: https://metanit.com/web/nodejs/2.5.php
// первый способ: через терминал
// При запуске приложения из терминала/командной строки мы можем передавать ему параметры. 
// Для получения параметров в коде приложения применяется массив process.argv.
let nodePath = process.argv[0];
let appPath = process.argv[1];
let name = process.argv[2];
let age = process.argv[3];
 
console.log("nodePath: " + nodePath); // E:\SoftWare\Node\node.exe
console.log("appPath: " + appPath); // E:\Practics-JavaScript\JsGame\metanit
console.log();
console.log("name: " + name); // undefined - потому что не введ парматры в командную строку
console.log("age: " + age); // undefined
// если введу в командную строку: "node metanit rishat 36", то: 
console.log("name: " + name); // rishat
console.log("age: " + age); // 36
// то есть, введенные нами параматры распределяются по массиву  
// и process.argv[2] = rishat и process.argv[3] = 36

// второй способ: также можно использовать поле script  в package.json введя например: ""node metanit параметрДляProcess.argv 36"
// Команды с остальными названия, как например, "dev" в вышеопределенном файле, запускаются так:
// npm run [название_команды]

//npm: https://metanit.com/web/nodejs/2.4.php
// узанть текущию версию npm
//npm -v
// обновить npm до последней версии
//npm install npm@latest -g

// ОТРЫВКИ ИЗ УЧЕБНИКА

// {
//     "name": "modulesapp",
//     "version": "1.0.0",
//     "dependencies": {
//       "express": "^4.17.1",
//       "react": "^16.9.0",
//       "react-dom": "^16.9.0"
//     }
//   }
//   Здесь добавлены определения двух пакетов, которые представляют библиотеку React.
  
//   Затем для загрузки всех пакетов выполнить команду
  
//   npm install
//   Эта команда возьмет определение всех пакетов из секций dependencies и загрузит их в проект. 
//   Если пакет с нужной версией уже есть проекте, как в данном случае express, то по новой он не загружается.

// ------devDependencies
// Кроме пакетов, которые применяются в приложении, когда оно запущено и находится в рабочем состояни, например, express, 
// то есть в состоянии "production", есть еще пакеты, которые применяются при разработке приложения и его тестировании. 
// Такие пакеты, как правило, добавляются в другую секцию - devDependencies.

// Например, загрузим в проект пакет jasmine-node, который используется для тестирования приложения:

// npm install jasmine-node --save-dev
// Флаг --save-dev указывается, что информацию о пакете следует сохранить именно в секции devDependencies файла package.json:

// {
//   "name": "modulesapp",
//   "version": "1.0.0",
//   "dependencies": {
//     "express": "^4.17.1",
//     "react": "^16.9.0",
//     "react-dom": "^16.9.0"
//   },
//   "devDependencies": {
//     "jasmine-node": "^3.0.0"
//   }
// }
// Удаление пакетов
// Для удаления пакетов используется команда npm uninstall. Например:

// npm uninstall express

// Если нам надо удалить не один пакет, а несколько, то мы можем удалить их определение из файла package.json и ввести команду npm install, 
// и удаленые из package.js пакеты также будут удалены из папки node_modules.

// Причем мы также можем одновременно некоторые пакеты добавлять в package.json, а некоторые, наоборот, удалять. 
// И при выполнении команды npm install пакетный менеджер новые пакеты установит, а удаленные из package.json пакеты удалит.


// Семантическое версионирование
// При определении версии пакета применяется семантическое версионирование. Номер версии, как правило, задается в следующем формате "major.minor.patch". 
// Если в приложении или пакете обнаружен какой-то баг и он исправляется, то увеличивается на единицу число "patch". 
// Если в пакет добавляется какая-то новая функциональность, которая совместима с предыдущей версией пакета, то это небольшое изменение, и увеличивается число "minor". 
// Если же в пакет вносятся какие-то большие изменения, которые несовместимы с предыдущей версией, то увеличивается число "major". 
// То есть глядя на разные версии пакетов, мы можем предположить, насколько велики в них различия.

// В примере с express версия пакета содержала, кроме того, дополнительный символ карет: "^4.14.0". 


// Этот символ означает, что при установке пакета в проект с помощью команды npm install будет устанавливаться последняя доступная версия от 4.14.0. 
// Фактически это будет последняя доступная версия в промежутке от 4.14.0 до 5.0.0 (>=4.14.0 и <5.0.0).


// ============Nodemon: https://metanit.com/web/nodejs/2.6.php

const http = require("http");
 
let message = "Hello World!";
http.createServer(function(request,response){
     
    console.log(message);
    response.end(message);
     
}).listen(3000, "127.0.0.1",()=>{
    console.log("Сервер начал прослушивание запросов");
});