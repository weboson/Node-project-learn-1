
//=====================================================================================================
//=============================ПО ВИДЕО ВЛАДИЛЕНА:https://www.youtube.com/watch?v=3aGSqasVPsI&t=995s===
//=================================================В ДОКУМЕНТЕ: Конспект по лекции Node.js=============================

// Nodejs по-умолчанию поддерживает модульную систему
// Подключим скачанную библиотеку, как модуль

//Есть два способа подключения модуля, и работает только один, два сразу нельзя:
//1) require('имямодуля') - режим commonjs, который сущетсвует давно в Node
//2) import имямодуля from 'имямодуля'; - режим EcmaScript, нативный JS-способ, который считается более прогрессивный, гибкий и современный

// 1) Чтобы подключить функцией require(''), для этого обязательно (или он по-умолчанию) в package.json...
// прописать код "type":"commonjs". И еще, важно зайти на страницу библиотки и посмотреть 
// как способ библиотека поддерживает.
// Так как, к пример, cowsay через require() не подключается и выдается ошибка.
// 				const chalk = require('chalk');
// 				console.log(chalk.blue('Hello world!'));


// 2) Способ от ES, для него в package.json нужно прописать "type":"module",
// 				import chalk from 'chalk';
//				console.log(chalk.blue('Hello world!'));



//-----------импорт библиотеки--------------------
// 2-й способ: ES-режим, где библиотека "cowsay" это и ожидает
//import cowsay from 'cowsay'; // убрал, т.к. работаю с другим видео, где много require
const cowsay = require('cowsay');  //- (ПО-УМОЛЧАНИЮ) РАБОТАЕТ, ЕСЛИ ПАКЕТ ПРЕДУСМАТРИВАЕТ, 
console.log(cowsay.say({
    text : "I'm a moooodule",
    e : "oO",
    T : "U "
}));


// 2-й способ: ES-режим, где библиотека "chalk" это тоже подразумевает 
//import chalk from 'chalk'; 
// Данный пакет с 5.0.0 версии подключается только через ES-module (import/export)
// А я убрал поле "", чтобы работать с другим видео, ведь ошибка, если запускать этот файл (index)  
//const chalk = require('chalk'); // НЕ РАБОТАЕТ - Данный пакет подключается только через ES-module (import/export)
//console.log(chalk.green('Hello world!'));


//-----------импорт своего моудля (убрал, т.к. работаю с другим видео, где много require)--------------------
//import {text} from './data.js';


//console.log(chalk.hex('#DEADED').underline(text)); // chalk.hex('#DEADED').underline('Hello, world!')
// другие пример цветов, взял со страницы библиотеки
// console.log(chalk.rgb(15, 100, 204).underline(text)); // chalk.rgb(15, 100, 204).inverse('Hello!')
// console.log(chalk.bgHex('#DEADED').underline(text)); // chalk.bgHex('#DEADED').underline('Hello, world!')
// console.log(chalk.bgRgb(15, 100, 204).underline(text)); //chalk.bgRgb(15, 100, 204).inverse('Hello!')
// console.log(chalk.rgb(255, 136, 0).bold(text)); //chalk.rgb(255, 136, 0).bold('Orange!')
// console.log(chalk.hex('#FF8800').bold(text)); //chalk.hex('#FF8800').bold('Orange!')
// console.log(chalk.bgAnsi256(194)(text)); //chalk.bgAnsi256(194)('Honeydew, more or less')


// Так как мы находимся в ES-модульном режиме, а не commonjs. Соотетственно, такие глобальные объекты не доступны:
// __dirname - хранить в себе путь до текущей папки, в котором файл с __dirname, то есть этот файл (index.js)
// __filename - хранить в себе путь до текущего файла, в котором написан с __dirname...





//=======================================================================================================
//=========ПО ВИДЕО Ulbi TV: "Node JS фундаментальный курс от А до Я. Node.js Теория и практика"=========
//==================================Ссылка: https://youtu.be/243pQXC5Ebs=================================
//Начал кодить с тайм кода "33:00": https://youtu.be/243pQXC5Ebs?t=1987


// process - глобальный объект, который дает информацию о текуще процессе
// например: уникальный индификатор, id текущего процесса
console.log(process.pid); // 132 - цифра (id) постоянно меняется
// если в терминале написать команду: "kill [номер процесса]", например: kill 132
// Для этого создав новый файл "process.js" (для удобства обучения) 
// напишем бесконечный цикл и посомтрим в ОС в "диспетчере задач", по id процесс Node
// Далее удалим процесс, прописав команду в терминале: kill [номер процесса]

fetch('user.js')
  // .then в коде ниже выполняется, когда удалённый сервер отвечает
  .then(function(response) {
    // response.text() возвращает новый промис,
    // который выполняется и возвращает полный ответ сервера,
    // когда он загрузится
    return response.text();
  })
  .then(function(text) {
    // ...и здесь содержимое полученного файла
    alert(text); // {"name": "iliakan", isAdmin: true}
  });


